all.equal(varChild,varRes+varEst)
efit <- lm(accel ~ mag+dist,
| attenu)
efit <- lm(accel ~ mag+dist,attenu)
summary(efit)
mean(efit$residuals)
cov(attenu$mag,efit$residuals)
cov(attenu$dist,efit$residuals)
cor(gpa_nor,gch_nor)
l_nor <- lm(child ~ parent, galton)
l_nor <- lm(gch_nor ~ gpa_nor)
fit <- lm(child ~ parent, galton)
fit$residuals)
fit$residuals
sqrt(sum(fit$residuals^2) / (n - 2))
summary(fit)$sigma
deviance(fit)/(n-2)
sqrt(deviance(fit)/(n-2))
mu<-mean(galton$child)
sTot<-sum(galton$child^2)
sTot <- sum((galton$child-mu)^2)
sRes<-deviance(fit$residuals)
sRes<-deviance(fit)
1 - sRes/sTot
summary(fit)$r - ans
summary(fit)$r - (1- sRes/sTot)
summary(fit)$r.squared
cor(fit$residuals, galton$parent)
cor(galton$parent,galton$child)^2
ones <- rep(1, nrow(galton))
lm(child ~ ones + parent -1, galton)
lm(child ~ parent, galton)
lm(child ~ 1, galton)
View(trees)
fit <- lm(Volume ~ Girth + Height + Constant -1, trees)
trees2 <- eliminate("Girth",
| trees)
trees2 <- eliminate("Girth",| trees)
trees2 <- eliminate("Girth", trees)
View(trees)
View(trees2)
fit2 <- lm(Volume ~ Height + Constant -1, trees2)
lapply(list(fit, fit2), coef)
lm(fertiliy)
all<-lm(fertility)
regrline <- lm(child ~ parent, galton)
all <- lm(Fertility ~ ., swiss)
summary(all)
all <- lm(Fertility ~ ., swiss)
summary(lm(Fertility ~ Agriculture, swiss))
cov(fit$residuals, galton$parent)
cov(1,1)
v
cor(swiss$Examination,swiss$Education)
cor(swiss$Agriculture,swiss$Education)
makelms(swiss$Agriculture)
makelms(1)
swiss$Agriculture
makelms()
ec=swiss$Examination +swiss$Catholic
ec <- swiss$Examination+swiss$Catholic
ec <- swiss$Examination+swiss$Catholic
efit <- lm(Fertility ~ . + ec, swiss)
efit <- lm(Fertility ~ . + ec, swiss)
all$coefficients-efit$coefficients
2
6
all$coefficients-efit$coefficients
dim(InsectSprays)
dim(InsectSprays)
head(InsectSprays,15)
head(InsectSprays,15)
sB
head(InsectSprays,15)
summary(InsectSprays[,2])
summary(InsectSprays[,2])
sapply(InsectSprays,class)
sapply(InsectSprays,class)
fit <- lm(count ~ spray, InsectSprays)
fit <- lm(count ~ spray, InsectSprays)
summary(fit)$coef
summary(fit)$coef
est <- summary(fit)$coef[,1]
est <- summary(fit)$coef[,1]
mean(sA)
mean(sA)
mean(sB)
v
mean(sA)
nfit <- lm(count ~ spray - 1, InsectSprays)
nfit <- lm(count ~ spray - 1, InsectSprays)
summary(nfit)$coef
summary(nfit)$coef
spray2 <- relevel(InsectSprays$spray,\"C\")
spray2 <- relevel(InsectSprays$spray,\"C\")
spray2 <- relevel(InsectSprays$spray,\"C\\")
spray2 <- relevel(InsectSprays$spray,\\"C\\")
spray2 <- relevel(InsectSprays$spray,\"C\")
spray2 <- relevel(InsectSprays$spray,\"C\)
spray2 <- relevel(InsectSprays$spray,\"C\")
spray2 <- relevel(InsectSprays$spray,C)
spray2 <- relevel(InsectSprays$spray,"C")
spray2 <- relevel(InsectSprays$spray,\"C\")
mean(sA)
fit2 <- lm(count ~ spray2, InsectSprays)
fit2 <- lm(count ~ spray2, InsectSprays)
summary(fit2)$coef
summary(fit2)$coef
mean(sC)
summary(fit2)$coef
(fit$coef[2]-fit$coef[3])/1.6011
(fit$coef[2]-fit$coef[3])/1.6011
dim(hunger)
dim(hunger)
swirl()
swirl()
mean(5)
hunger.shape)()
hunger.shape()
size(hunger)
hunger.size()
hunger.size
dim(hunger)
dim(hunger)
swirl()
dim(hunger)
swirl()
dim(hunger)
length(hunger[,1])
length(hunger[,1])
names(hunger)
names(hunger)
fit <- lm(hunger$Numeric ~ hunger$Year)
fit <- lm(hunger$Numeric ~ hunger$Year)
summary(fit)$coe
summary(fit)$coef
summary(fit)$coef
lmF<-lm(Numeric[Sex=="Female"] ~ Year[Sex=="Female"],hunger)
lm(Numeric[Sex=="Female"] ~ Year[Sex=="Female"],hunger)
lmM<-lm(Numeric[Sex=="Male"] ~ Year[Sex=="Male"],hunger)
lm(Numeric[Sex=="Female"] ~ Year[Sex=="Female"],hunger)
lmBoth <- lm(Numeric ~ Year+Sex,hunger)
lmBoth
| <- lm(Numeric ~ Year+Sex,hunger)
lmBoth<- lm(Numeric ~ Year+Sex,hunger)
summary(lmBoth)
summary(lmBoth)
lmInter <- lm(Numeric ~ Year + Sex + Year*Sex, hunger)
summary(lmInter)
fit <- lm(y ~ x, out2)
plot(fit, which=1)
plot(fit, which=1)
fitno <- lm(y ~ x, out2[-1, ])
fitno <- lm(y ~ x, out2[-1, ])
plot(fitno, which=1)
plot(fitno, which=1)
coef(fit)-coef(fitno)
coef(fit)-coef(fitno)
View(dfbeta(fit))
head(dfbeta(fit))
resno <- out2[1, "y"] - predict(fitno, out2[1,])
1-resid(fit)[1]/resno
head(hatvalues(fit))
head(hatvalues(fit))
sigma <- sqrt(deviance(fit)/df.residual(fit))
sigma <- sqrt(deviance(fit)/df.residual(fit))
rstd <- resid(fit)/(sigma * sqrt(1-hatvalues(fit)))
View(cbind(rstd, rstandard(fit)))
plot(fit, which=3)
plot(fit, which=3)
plot(fit, which=2)
plot(fit, which=2)
sigma1 <- sqrt(deviance(fitno)/df.residual(fitno))
sigma1 <- sqrt(deviance(fitno)/df.residual(fitno))
resid(fit)[1]/(sigma1*sqrt(1-hatvalues(fit)[1]))
resid(fit)[1]/(sigma1*sqrt(1-hatvalues(fit)[1]))
head(rstudent(fit))
head(rstudent(fit))
dy <- predict(fitno, out2)-predict(fit, out2)
dy <- predict(fitno, out2)-predict(fit, out2)
sum(dy^2)/(2*sigma^2)
sum(dy^2)/(2*sigma^2)
plot(fit, which=5)
plot(fit, which=5)
rgp1()
rgp2()
head(swiss)
plot(fit, which=5)
mdl <- lm(Fertility ~ ., swiss)
vif(mdl)
vif(mdl)
mdl2 <- lm(Fertility ~ . -Examination, swiss)
vif(mdl2)
mdl2 <- lm(Fertility ~ . -Examination, swiss)
x1c <- simbias()
x1c <- simbias()
apply(x1c, 1, mean)
apply(x1c, 1, mean)
fit1 <- lm(Fertility ~ Agriculture, swiss)
fit1 <- lm(Fertility ~ Agriculture, swiss)
fit3 <- lm(Fertility ~ Agriculture + Examination + Education, swiss)
anova(fit1,fit2)
anova(fit1,fit3)
fit3 <- lm(Fertility ~ Agriculture + Examination + Education, swiss)
deviance(fit3)
deviance(fit3)
d <- deviance(fit3)/43
d <- deviance(fit3)/43
v
n <- (deviance(fit1) - deviance(fit3))/2
n <- (deviance(fit1) - deviance(fit3))/2
n/d
n <- (deviance(fit1) - deviance(fit3))/2
pf(n/d, 2, 43, lower.tail=FALSE)
pf(n/d, 2, 43, lower.tail=FALSE)
shapiro.test(fit3$residuals)
anova(fit1, fit3, fit5, fit6)
anova(fit1, fit3, fit5, fit6)
View(ravenData)
View(ravenData)
mdl <- glm(ravenWinNum ~ ravenScore, family=binomial, data=ravenData)
mdl <- glm(ravenWinNum ~ ravenScore, family=binomial, data=ravenData)
lodds <- predict(mdl, data.frame(ravenScore=c(0, 3, 6)))
lodds <- predict(mdl, data.frame(ravenScore=c(0, 3, 6)))
exp(lodds)/(1+exp(lodds))
exp(lodds)/(1+exp(lodds))
summary(mdl)
summary(mdl)
exp(confint(mdl))
anova(mdl)
anova(mdl)
qchisq(0.95, 1)
qchisq(0.95, 1)
var(rpois(1000, 50))
tail(hits)
class(hits[,'date'])
as.integer(head(hits[,'date']))
mdl<-glm(visits ~ date, poisson, hits)
summary(mdl)
confint(mdl, 'date')
exp(confint(mdl, 'date'))
which.max(hits[,'visits']
dvv
which.max(hits[,'visits']
fv
mean(1)
which.max(hits[,'visits'])
v
hits[704,]
hits[704,]
lambda <- mdl$fitted.values[704]
qpois(.95, lambda)
qpois(.95, lambda)
mdl2 <- glm(formula = simplystats ~ date, family = poisson, data = hits, offset = log(visits + 1))
mdl2 <- glm(formula = simplystats ~ date, family = poisson, data = hits, offset = log(visits + 1))
qpois(.95, mdl2$fitted.values[704])
library(shiny)
install.packages("shiny")
install.packages("XML")
library(shiny)
install.packages("httpuv")
# Define UI for dataset viewer application#pageWithSidebar
shinyUI(
fluidPage(
# Application title
headerPanel("Today's weather forecast"),
sidebarPanel(
textInput('city', "Enter the name of your City and the preferably two digit Country code. Hint: For City 'New York', enter County code 'US' " ,
"New York,US"),
submitButton('Enter')
),
mainPanel(
h4("The weather forecast for your city:"),
verbatimTextOutput("inputValue"),
h3('Crucial Weather elements with magnitude is listed bellow:'),
h4('Temeprature: (in degree Fahrenheit)'),
verbatimTextOutput("prediction"),
h4('Humidity:'),
verbatimTextOutput("prediction1"),
h4('Wind:'),
verbatimTextOutput("prediction2")
)
)
)
install.packages("shinyapps")
if (!require("devtools"))
install.packages("devtools")
devtools::install_github("rstudio/shinyapps")
shinyapps::setAccountInfo(name='minhaz7', token='E40908A64E0340D9E0D88AC7F37ABA52', secret='Rzm967GoDEf8sNXlO+/aV4uhWldqGw5DnCNOPFpe')
source("ui.R")
setwd("C:\\Users\\abbuma\\Desktop\\Developing_Data_Products-master)
dvf
dvdsv
dvdsv
)
cs cbvadf
a+A
library(swirl)
swirl()
install_from_swirl("Getting and Cleaning Data")
swirl()
mydf<-read.csv(path2csv, stringsAsFactors = FALSE)
dim()
dim(mydf)
head(mydf)
library(dplyr)
packageVersion("dplyr")
cran <- tbl_df(mydf)
rm("mydf")
rm("mydf")
rm("mydf")
v
?tbl_df
cran
?manip
select(cran, ip_id, package, country)
5:20
select(cran,r_arch:country)
select(cran,r_arch:country)
select(cran,r_arch:country)
select(cran,country:r_arch)
select(cran,country:r_arch)
cran
select(cran, -time)
select()
select(cran, -time)
-5:20
-5:20
-(-5:20)
-(5:20)
-5:20
select(cran, -(X:size))
filter(cran, package == "swirl")
filter(cran, package == "swirl")
filter(cran, r_version == "3.1.1", country == "US")
filter(cran, r_version == "3.1.1", country == "US")
?Comparison
?Comparison
?Comparison
filter(cran, r_version == "3.1.1", country == "US")
filter(cran, r_version <= "3.0.2", country == "IN")
filter(cran, country == "US" | country== "IN")
filter(cran, country == "US" | country== "IN")
filter(cran, size > 100500, r_os == "linux-gnu")
is.na(c(3, 5, NA, 10))
is.na(c(3, 5, NA, 10))
v
5, NA, 10))
((5, NA, 10))
(5, NA, 10)
c(5, NA, 10)
!is.na(c(3, 5, NA, 10))
!is.na(c(3, 5, NA, 10))
filter(cran, !is.na(r_version))
filter(cran, !is.na(r_version))
select(cran, size:ip_id)
select(cran, size:ip_id)
select(cran, size:ip_id)
select(cran, size:ip_id)
select(cran, size:ip_id)
cran2<-select(cran, size:ip_id)
cran2<-select(cran, size:ip_id)
arrange(cran2, ip_id)
desc(ip_id)
desc(ip_id)
desc(ip_id)
arrange(cran2, ip_id)
arrange(cran2, desc(ip_id))
arrange(cran2, desc(ip_id))
arrange(cran2, package, ip_id)
arrange(cran2, package, ip_id)
arrange(cran2, country, desc(r_version), ip_id)
arrange(cran2, country, desc(r_version), ip_id)
cran3 <- select(cran, ip_id, package, size)
cran3
mutate(cran3, size_mb = size / 2^20)
mutate(cran3, size_mb = size / 2^20)
mutate(cran3, size_mb = size / 2^20, size_gb = size_mb / 2^10)
mutate(cran3, size_mb = size / 2^20, size_gb = size_mb / 2^10)
mutate(cran3, correct_size = size + 1000)
mutate(cran3, correct_size = size + 1000)
summarize(cran, avg_bytes = mean(size))
a<-2
library(dplyr)
library(dplyr)
cran <- tbl_df(mydf)
rm("mydf")
cran
cran <- tbl_df(mydf)
a<-2
?group_by
a<-2
group_by(cran, package)
group_by(cran, package)
by_package<-group_by(cran, package)
by_package
mean(size)
by_package
summarize(by_package,mean(size))
summarize(by_package,mean(size))
summarize(by_package,mean(size))
by_package
group_by(cran, package)
country (chr)
submit()
submit()
submit()
submit()
country (chr)
country (chr)
reset()
# 1. count = n()
# 2. unique = n_distinct(ip_id)
# 3. countries = n_distinct(country)
# 4. avg_bytes = mean(size)
pack_sum <- summarize(by_package,
count = ,
unique = ,
countries = ,
avg_bytes = )
pack_sum <- summarize(by_package, count = , unique = , countries = , avg_bytes = )
pack_sum <- summarize(by_package, count = , unique = , countries = , avg_bytes = )
by_package
count=n(by_package)
?n
data("hflights", package = "hflights")
data
carriers <- group_by(hflights, UniqueCarrier)
carriers
summarise(carriers, n())
summarise(by_package, n())
count=summarise(by_package, n())
count
mutate(carriers, n = n())
?n_distinct
unique = n_distinct(ip_id)
unique = n_distinct(by_package.ip_id)
by_package
by_package.X
View(by_package)
by_package["ip_id"]
n_distinct(by_package["ip_id"])
c(by_package["ip_id"])
n_distinct(c(by_package["ip_id"]))
qwe<-c(by_package["ip_id"])
n_distinct(qwe)
qwe
is.matrix(qwe)
avector = c()
for(atmp in by_package['ip_id']) { avector <- atmp }
is.matrix(avector)
is.vector(qwe)
is.vector(qwe)
n_distinct(avector)
n_distinct(qwe)
n_distinct(avector)
?n
n(avector)
count=summarise(by_package, n())
length(count)
nrow(count)
nrow(avector)
length(avector)
avector<-c()
for(atmp in by_package['country']) { avector <- atmp }
countries<-n_distinct(avector)
avg_bytes = mean(size)
avector<-c()
for(atmp in by_package['country']) { avector <- atmp }
countries<-n_distinct(avector)
reset
reset()
ls
setwd("C:\\Users\\abbuma\\Desktop\\folder")
source("pollutantmean.R")
setwd("C:\\Users\\abbuma\\Desktop\\folder")
source("pollutantmean.R")
source("pollutantmean.R")
pollutantmean("specdata", "sulfate", 1:10)
gfg
source("pollutantmean.R")
pollutantmean("specdata", "sulfate", 1:10)
submit()
source("submitscript1.R")
submit()
submit()
submit()
submit()
5
submit()
submit()
submit()
submit()
submit()
10
submit()
source("submitscript3.R")
submit()
submit()
3
submit()
submit()
submit()
submit()
submit()
submit()
submit()
submit()
submit()
submit()
submit()
dgfg
